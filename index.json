[{"categories":["Supply chain"],"contents":"Situation MCS Corporation produces an amazing toy called DinoBall. This toy is so popular that MCS Corporation can run 8 retail stores dedicated to selling just this product. MCS Corporation is dedicated to meeting all demand for Dinoball. The toy is produced at 3 production facilities owned by MCS Corporation, each of which has multiple production lines dedicated to producing the DinoBall toy. The characteristics of each of these production lines are a function of their age: newer production lines produce the DinoBall toy quicker and use less power. MCS Corporation plans monthly for production levels across its facilities based on the demand for DinoBall. Currently, DinoBall operates under the policy that each facility will, monthly, produce the same number of toys. In other words, the facilities are ‘balanced’ in that each of them produces 13 of DinoBall’s monthly demand. MCS Corporation likes the idea of equal ‘wear and tear’ on each production line at a particular facility: MCS Corporation currently implements the requirement that every production line at a facility runs for the same length of time during a month. For purposes of this analysis, you can assume that a ‘month’ consists of four 40 hour weeks (for a total of 160 hours). Each production line has the required salaried staff to operate the production lines who all work 40 hours per week. MCS Corporation contracts with LM Trucking to transport DinoBall from their facilities to their retail stores. LM Trucking needs your team to solve an optimization problem to determine the shipment levels and associated costs. The policy of LM Trucking is then to charge a premium of 20% to MCS corporation in billing them for the logistics services. MCS is charged for the energy they use to run their production lines. Due to their age, each production line requires different amounts of energy (kWh) and each production facility has negotiated a set price per kWh with the power company. MCS Corporation hired your group to address several areas of interest that they believe can be ad- dressed using Industrial and Systems Engineering models and methods. They provided you with past data (e.g., historical demand levels, distances between facilities and retail stores, characteristics of pro- duction lines) about their company to help address these areas of interest. The past data is available in the associated Excel file. The MCS Corporation is interested in addressing two ‘what-if’ questions independent of each other.\nQuestion 1: MCS Corporation is considering removing the policy that each facility is responsible for produc- ing the same number of toys. They believe that this would drive down their total operating costs but are concerned about the idea of restructuring their company (i.e., they may need to relocate workers amongst their facilities, increase worker hours). MCS Corporation is interested in deter- mining the amount of savings that would result from removing this policy. Note that the “even wear and tear” policy on the production lines will remain in place.\nQuestion 2: MCS Corporation has an opportunity to update all production lines with the new technology ‘FastProd’. This new production line will decrease production costs of DinoBall since FastProd produces at a faster rate with less energy. They believe that the life cycle of each new production line will be 3 years. The company that sells FastProd insists that they will only install FastProd at the facilities of MCS Corporation if all production lines are outfitted with FastProd. MCS plans to sell each existing production line that is replaced; however, MCS is unsure how much they will be able to sell the used lines for. MCS Corporation would like to determine a ‘reserve price,’ which is the maximum amount they are willing to pay for this type of contract, in preparing to negotiate with the company that produces FastProd.\nTask This project is about helping MCS Corporation to minimize their operating cost by optimizing their production and transportation process using linear programming with Gurobi. We provide three linear programming models to solve the following problems:\n Original Model: What is the optimal quantity for each factory producing the same quantity? ‘What If’ question 1 Model: What is the optimal quantity for each factory producing a different quantity? ‘What If’ question 2 Model: What is the reserve price of the old production line if the company replaces the new production line?  After applying Gurobi, we will get the results related to the model, including units produced at each factory (decision variables), the minimum cost (the objective function) based on all the necessary limitations (constraints).\nAction We were given some information about the factories and customers. We define that information into parameters in our model: Decision Variables uijm: the number of units transported from factory i to store j in month m\nSilm: the number of units produced at factory i from production line l in month m\nObjective function Our objective is minimizing the annual total cost which includes cost of production and cost of transportation. The summation of transportation cost from each factory [i] to store [j] will be the total transportation cost. The cost of production at each factory[i] for production line [l] is equal to the unit production cost [c] multiply by the total unit produced [S] at the respective factory [i] for production line[l]. There is 20% of premium charged by LM Trucking, this is reflected by the multiplication of 1.2 which is 120% of the total cost. The period is 1 year, hence summing the total cost of 12 months.\nConstraints  Demand Fulfilment on Transportation: this constraint ensures the number of units transported from all the factory to store [j] can fulfil the demand of each store [j].  Production Capacity: this constraint ensures the total production for all the production lines does not exceed the production capacity of each factory [i] every month.  Demand Fulfilment on Factory: this constraint ensures the total units produced in 3 factories able to fulfil DinoBall’s monthly demand [m].  Transportation Units Can’t Exceed Production Units: this constraint ensures the total units transported from facility [i] to store [j] less than or equal to the total units of production at facility [i] from all the production lines [l] in month [m].  Consistent Production: this constraint ensures the total units transported from facility [i] to store [j] less than or equal to the total units of production at facility [i] from all the production lines [l] in month [m].  Equal Wear and Tear: these constraints ensure consistent wear and tear for each production line. The run time for each production line is equal to units produced by each production line divide by the rate of production of each production line.  Non-negativity: this constraint ensures all decision variable are non-negativity.  Assumptions  Every truck carries specific demand, but the unit transportation cost was calculated based on full capacity. Fixed holding cost - Assume the holding cost for each store is known and fixed. Inventory Model wasn’t considered since inventory capacity at the stores wasn’t known. Each truck can only transport to one store - Assume there is no detour to another store when transporting from factory i to store j.  Result Based on our analysis, the total cost of the original model is $2,747,837.5 and the total saving for removing constant unit production in every factory is $1,242,638. This model is recommended if the cost of restructuring the company is lower than the total saving amount from model 1. According to the analysis, “Fast Prod” production lines are capable to save $5,810,068 over three years compared to the old production lines. “Fast Prod” is highly recommended if the cost of upgrading the production lines is lower than $5,810,068. Besides, this saving has not included the salvage value of old production line. If we assume the old production lines have a total salvage value which is equal to 10% of the new production lines. The total saving would be $5,810,068 – 0.9 * Cost of Installing “Fast Prod”. The inventory model would also be recommended for lowering the cost of the model. Inventory could be potentially stored at stores where the holding cost per unit is less than the transportation cost of the unit. Also, the trucks could carry up to a full 250 units with normal optimization problem becoming a Routing and Scheduling problem.\nReference Gurobi Jupyter notebook modeling examples. Gurobi. (2022, April 4). Retrieved May 4, 2022, from: https://www.gurobi.com/resource/modeling-examples-using-the-gurobi-python-api-in-jupyter-notebook/\nCode  Jupyter Notebook Python  Authors Yu Heng Chien, Ching Ju Hsiao, Shu Nee Khor, Chia Wei Liu, Harsh Rajendra Somani\nInstructor: Dr. Joseph Geunes Texas A\u0026amp;M University Department of Industrail Engineering\n","permalink":"https://kimtyweter.github.io/blog/sc-msc/","tags":["Python","Optimization","Gurobi"],"title":"Solving Production Optimization Problem by Gurobi Package"},{"categories":["Supply chain"],"contents":"Language:  Python: Determine reorder point and order quantity to minimize expected cost per year  Situation Suppose now that the rate at which the plant uses power-lock mechanisms is stochastic and normally distributed, with a mean of 192 per day (8 per hour) and a standard deviation of 17.4 per day. Replenishment orders for power-lock mechanisms incur a lead time of 3 days. If the plant runs out of power locks, it must expedite them from the supplier at a cost of $40 each.\n  Find r and Q using each of the methods below.\n  Also report the expected total cost per week.\n  Solution Approach   Expected-Inventory-Level Approximation:\nThe first approximation we discuss is probably the best known and most widely covered approximation to find r and Q. We call this the expected-inventory-level (EIL) approximation, for reasons that will become clear shortly.\n Demo Code    EOQB Approximation:\nThere are important connections between the EOQ problem with planned backorders and (r, Q) policies with continuous demand distributions. We explore these connections further in Section 5.4. The EOQB approximation for finding near-optimal r and Q makes use of the EOQB, setting Q using (3.27) and r using Lemma 5.2. This approach has a fixed worst-case error bound of 0.125.\n Demo Code    EOQB + SS Approximation:\nAnother common approximation for r and Q is to convert the inventory-cost parameters into a service level and then to use the approach described for type-1 service level constraints. The safety stock is given by s = r − µ = zασ. The expected inventory process can be thought of as being decomposed into two parts, a “top” part that looks like an EOQ curve and a “bottom” part that is flat, with a height of s, the safety stock.\nWe therefore refer to this as the EOQ+SS approximation.\n Demo Code    Comparasion    Approximation Reorder Point Order Quantity Expected Cost     Expected-Inventory-Level 644.84 400.76 100.61   EOQB 609.02 391.33 90.93   EOQB + SS 652.96 390.28 101.12    ","permalink":"https://kimtyweter.github.io/blog/sc-stochastic-inventory-continuous-review/","tags":["Python","Dynamic programming","Optimization"],"title":"Solving Stochastic Inventory Problem: Continuous Review"},{"categories":["Supply chain"],"contents":"Language:  Python: Created full algorithm for solving periofic review\u0026rsquo;s stochastic inventory problem in real life  Situation Weekly demand for refrigerators at an appliance store has a Poisson distribution with 4. The holding and stockout cost for refrigerators at the store are $40 and $125 per week, respectively. Replenishment orders for refrigerators incur a fixed cost of $150.\nFind the optimal parameters (s, S), and the corresponding optimal cost.\nSolution Approach Additionalpropertiesthathelpdeviseanalgorithm:\n  Let y* minimize g(y); then s* ≤ y* ≤ S*\n We only need to look for s≤y* and S≥y*    Let s = max{y \u0026lt; y*|g(y, S) ≤ g(y)}; then s is the optimal reorder point for S\n Given S, the biggest s smaller than y* such that the cost per period of the corresponding (s, S) policy does not exceed the single period cost at that reorder point is optimal for S    If S\u0026rsquo; and S are two order-up-to levels, then g(s*(S),S) \u0026lt; g(s*(S\u0026rsquo;),S\u0026rsquo;) if and only if g(s*(S\u0026rsquo;),S) \u0026lt; g(s*(S\u0026rsquo;),S')\n Suppose we use the optimal reorder point for S\u0026rsquo; (s*(S\u0026rsquo;)) together with some other S; if this is better than using this reorder point with S\u0026rsquo; itself, then the best solution with S is better than the best solution with S'    If (s*, S*) are optimal with cost g* = g(s*, S*) then S* ≤ max{y ≥ y*|g(y) ≤ g*}\n Given a proposed (s, S), if there is a y\u0026rsquo; ≥ y* with single-period cost g(y\u0026rsquo;) less than or equal to g(s, S) and S \u0026gt; y\u0026rsquo;, then (s, S) cannot be optimal    We can now state an algorithm for finding (s*, S*)\n  Algorithm While g(S) ≤ g\u0026#39;: If g(s\u0026#39;, S) \u0026lt; g\u0026#39;, Set S\u0026#39;=S While g(s,S\u0026#39;)≤g(s+1): Sets=s+1 End while Set s\u0026#39;=s;g\u0026#39;=g(s\u0026#39;,S\u0026#39;) End if Set S = S + 1 End while Return (s\u0026#39;, S\u0026#39;) Result  Demo Code  ","permalink":"https://kimtyweter.github.io/blog/sc-stochastic-inventory-periodic-review/","tags":["Python","Dynamic programming","Optimization"],"title":"Solving Stochastic Inventory Problem: Periodic Review"},{"categories":["Software Engineer"],"contents":"Language:  Python: Created interface and animate in the game  Introduction At the beginning, the player controls a turtle, it will keep moving forward, the player can only control the head of the turtle to face (up, down, left and right), and the goal is to touch the blue dot, and avoid touching itself or other obstacles. Every time the turtle eats a blue dot, its body grows. There are walls on all four sides of the game interface (all of which cannot be crossed), and the highest score and the current score are recorded in words.\nResult  Demo Code  ","permalink":"https://kimtyweter.github.io/blog/turtle-game/","tags":["Python","Game Design"],"title":"Turtle Game"},{"categories":["Software Engineer"],"contents":"Language:  Python: Built full processes including analytics and API connections  Situation Instagram is one of the most popular social networking platforms in modern times. It can be used to record life, and at the same time, you can receive updates from friends through Instagram. But sometimes I often find that my number of followers are decreasing, or sometimes, one or two fans are inexplicably lost.\nTask I designed a tracker for unfollowers. I hope I can use programming language to find out who unfollowed my Instagram. Therefore, let\u0026rsquo;s review whether there are some changes in the relationship between yourself and Unfollowers or something to be vigilant about.\nAction The framework is listed below: Result  Demo Code  ","permalink":"https://kimtyweter.github.io/blog/instagram-unfollwers/","tags":["Python","System Design"],"title":"Who Unfollowed My Instagram? "},{"categories":["Data Visualization"],"contents":"Introduction This research investigates the relationship between PM2.5 emissions and economic groups in Harris county, Texas. The results of the study found that low-income groups are more likely to be exposed to PM2.5 harmful substances. Detailed research report can refer to the link. This article is dedicated to presenting the advanced drawing methods and drawing results used in the research.\nLanguage SQL: Querying data from the database Python: Data processing and Data visualization  Matplotlib Seaborn Geopandas  Data Visualization 1. Map and Scatter plot with density This graph presents a density map of PM2.5 emissions in Harris County, Texas. If the amount of discharge is larger, it is represented by a larger circle; if the amount of discharge is small, it is represented by a small blue circle. Both the shade of color and the size of the circle are related to emissions. Code\n2. Handmade grid map with density This picture uses the latitude and longitude cutting method to cut the longitude and latitude of Harris County. And calculate the household Income of the square for Segregation transformation, and visualize it as shown above. Code\n3. CBGs based map with density This graph uses CBGs (Census Block Group) as a unit to show the differences of Income in various regions. Code\n4. Professional expression of line-bar, scatterplot, and histogram The following four images show the line-bar, scatterplot, and histogram used in professional journals, respectively.\nLine bar This figure shows the income presentation of the four income groups, and adds the error bar to indicate the 95% confidence interval in the gap between groups. If the error bar overlaps between the two groups, it means that the difference between the two groups is not significant. Code\nScatterplot Scatter plots can be used to show the relationship between probability densities and variable series. At the same time, this figure also compares the probability density of two different variables. Code\nHistogram This figure demonstrates the flexibility to control the difference between bin and n. In addition, the visibility of the data can be better reflected through the transformation of color. Code\n5. Advanced Line bar chart This graph shows the relationship between different emitting industries and human activities. Through advanced drawing techniques, we distinguish the positive and negative values ​​of the data with different colors, and also classify the total emissions of various industries with colors. Code\n","permalink":"https://kimtyweter.github.io/blog/air-pollution/","tags":["Python","SQL","GEOPandas","Matplotlib"],"title":"Mobility Patterns of Low-Income People Lead to High Exposure to Respiratory Hazards"},{"categories":["Optimization"],"contents":"Language:  Python: Used in inbound call prediction and data processing C++: Used in Genertic Algorithm  Situation Due to the problem of uneven distribution of manpower in the company\u0026rsquo;s telephone customer service department for a long time, there is often a shortage of manpower or a surplus of manpower. Manpower shortage and manpower surplus are both key factors that affect the operation of the company because the shortage of manpower will make the service level of the company decline, and affect the reputation of the company or the perception of the company. If there is excess manpower, it is a waste of the company\u0026rsquo;s labor costs.\nTask I try to combine the three methods of data science, programming, and optimization methods into one, and integrate these three methods into a system to help companies achieve the purpose of human resource optimization.\nAction First, I predict the incoming telephone line volume for the next month, and convert the predicted results into the required manpower through systematic simulation. Finally, we will apply the mathematical model of linear programming to convert the manpower constraints and company policies into several mathematically expressed sets of decision variables, an objective function, and a set of constraints. Lastly, I apply them to the genetic algorithm developed in C++ to allocate human resources. The end result is the shift schedule that each customer service employee receives.\nResult  Scheduling work efficiency: one day becomes half an hour Early warning effect: the rate of absenteeism can be calculated, so that the call center can be prepared Manpower utilization: 82% to 89%  ","permalink":"https://kimtyweter.github.io/blog/scheduling/","tags":["Python","C++","Scheduling"],"title":"Scheduling with Genertic Algorithm"},{"categories":["Supply Chain"],"contents":"Introduction Where to set up factories and workshops is one of the typical problems of industrial engineering. This type of model usually takes into account issues such as demand, shipping costs and inventory costs to find the most suitable location to set up facilities.\nTherefore, this article applies three common models to solve facility location problems:\n1. Uncapacitated fixed-charge location problem(UFLP): Minimize fixed + transportation cost\n2. Set covering location problem(SCLP): Minimize number of facilities\n3. Maximum covering location problem(MCLP): Maximize covered demands\nLanguage/ Tool/ Package Python  gurobipy: The Gurobi Optimizer is a mathematical optimization software library for solving mixed-integer linear and quadratic optimization problems. pandas: open source data analysis and manipulation tool itertools: this module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML.  Background Information 1. Customer Data for a 10- node demands, fixed cost and location (express by x, y)\n   Index x y Demand Fixed Cost     1 0.2 0.1 60 200   2 0.9 0.7 27 200   3 0.2 0.4 29 200   4 0.9 0.2 26 200   5 0.5 0.9 33 200   6 0.6 0.3 15 200   7 0.8 0.4 17 200   8 0.5 0.3 97 200   9 0.3 0.6 97 200   10 0.2 0.6 19 200    2. Distance: Distance is computed by Euclidean distance between the nodes.\n   Facilities 1 2 3 4 5 6 7 8 9 10     1 0.0000 9.2195 3.0000 7.0711 8.5440 4.4721 6.7082 3.6056 5.0990 5.0000   2 9.2195 0.0000 7.6158 5.0000 4.4721 5.0000 3.1623 5.6569 6.0828 7.0711   3 3.0000 7.6158 0.0000 7.2801 5.8310 4.1231 6.0000 3.1623 2.2361 2.0000   4 7.0711 5.0000 7.2801 0.0000 8.0623 3.1623 2.2361 4.1231 7.2111 8.0623   5 8.5440 4.4721 5.8310 8.0623 0.0000 6.0828 5.8310 6.0000 3.6056 4.2426   6 4.4721 5.0000 4.1231 3.1623 6.0828 0.0000 2.2361 1.0000 4.2426 5.0000   7 6.7082 3.1623 6.0000 2.2361 5.8310 2.2361 0.0000 3.1623 5.3852 6.3246   8 3.6056 5.6569 3.1623 4.1231 6.0000 1.0000 3.1623 0.0000 3.6056 4.2426   9 5.0990 6.0828 2.2361 7.2111 3.6056 4.2426 5.3852 3.6056 0.0000 1.0000   10 5.0000 7.0711 2.0000 8.0623 4.2426 5.0000 6.3246 4.2426 1.0000 0.0000    Uncapacitated Fixed-charge Location Problem (UFLP) - Minimize fixed + transportation cost Example: The background information contains nodes located on the unit square and I = J. The background information lists the x- and y-coordinates, demands hi, and fixed costs fj for each node, as well as the transportation cost cij between each pair of nodes i and j. Transportation costs equal 10 times the Euclidean distance between the nodes. All fixed costs equal 200.\nSolution Approach: Decision variables: cartesian_prod = list(product(range(0, 10), range(0, 10))) cust = m.addVars(cartesian_prod, lb = 0 ,vtype = GRB.CONTINUOUS, name=\u0026#39;cust\u0026#39;) Objection: m.setObjective(gp.quicksum(df_demand[customer] * shipping_cost[customer, facility] * cust[customer, facility] for customer in range(0, 10) for facility in range(0, len(fact))) + gp.quicksum(fact[facility] for facility in range(0, len(fact))) * 200 , GRB.MINIMIZE) Constraints: m.addConstrs((gp.quicksum(cust[(customer, facility)] for facility in range(0, 10)) == 1 for customer in range(0, 10)), name=\u0026#39;Demand\u0026#39;)  m.addConstrs((cust[customer, facility] \u0026lt;= fact[facility] for customer, facility in cartesian_prod), name=\u0026#39;Setup2ship\u0026#39;) Results: Code   Jupyter Notebook\n  Python\n  Set Covering Location Problem (SCLP) - Minimize number of facilities Example: Using the data from background information, solve the SCLP exactly by implementing it in the modeling language with a MIP solver. Set the fixed cost of every facility equal to 1. Assume that facility j covers customer i if cij ≤ 2.5. Report the optimal locations.\nSolution Approach: Decision variables: fact = m.addVars(10, vtype = GRB.BINARY, name=\u0026#39;fact\u0026#39;) Objection: obj = gp.quicksum(f * fact[facility] for facility in range(0, 10)) m.setObjective(obj, GRB.MINIMIZE) Constraints: m.addConstrs((gp.quicksum(aij[(customer, facility)] * fact[facility] for facility in range(0, 10)) \u0026gt;= 1 for customer in range(0, 10)), name=\u0026#39;coverage\u0026#39;) Results: Code   Jupyter Notebook\n  Python\n  Maximum covering location problem (MCLP) - Maximize covered demands Example: Using the data from background information, solve the MCLP exactly by implementing it in the modeling language with a MIP solver. Set p = 4. Assume that facility j covers customer i if cij ≤ 2.5.\nReport the optimal locations and the total number of demands covered.\nSolution Approach: Decision variables: fact = m.addVars(10, vtype = GRB.BINARY, name=\u0026#39;fact\u0026#39;) Objection: obj = gp.quicksum(f * fact[facility] for facility in range(0, 10)) m.setObjective(obj, GRB.MINIMIZE) Constraints: m.addConstrs((gp.quicksum(aij[(customer, facility)] * fact[facility] for facility in range(0, 10)) \u0026gt;= 1 for customer in range(0, 10)), name=\u0026#39;coverage\u0026#39;) Results: Code   Jupyter Notebook\n  Python\n  Repo ","permalink":"https://kimtyweter.github.io/blog/sc-facility/","tags":["Python","Optimization","Dynamic Programming","Gurobi"],"title":"Solving Facility Location Problems"},{"categories":["Data Science"],"contents":"Introduction Using linear regression by several curracny as factors to predict USD and EUD.\nLanguage/ Tool/ Package Python  twder: NTD exchange rate pandas: open source data analysis and manipulation tool statsmodels: supports specifying models using R-style formulas and pandas DataFrames  Repo ","permalink":"https://kimtyweter.github.io/blog/exchange/","tags":["Python","Machine Learning","Finance"],"title":"Exchange Prediction"}]