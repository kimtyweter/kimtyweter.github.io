[{"categories":["Supply chain"],"contents":"Language:  Python: Determine reorder point and order quantity to minimize expected cost per year  Situation Suppose now that the rate at which the plant uses power-lock mechanisms is stochastic and normally distributed, with a mean of 192 per day (8 per hour) and a standard deviation of 17.4 per day. Replenishment orders for power-lock mechanisms incur a lead time of 3 days. If the plant runs out of power locks, it must expedite them from the supplier at a cost of $40 each.\n  Find r and Q using each of the methods below.\n  Also report the expected total cost per week.\n  Solution Approach   Expected-Inventory-Level Approximation:\nThe first approximation we discuss is probably the best known and most widely covered approximation to find r and Q. We call this the expected-inventory-level (EIL) approximation, for reasons that will become clear shortly.\n Demo Code    EOQB Approximation:\nThere are important connections between the EOQ problem with planned backorders and (r, Q) policies with continuous demand distributions. We explore these connections further in Section 5.4. The EOQB approximation for finding near-optimal r and Q makes use of the EOQB, setting Q using (3.27) and r using Lemma 5.2. This approach has a fixed worst-case error bound of 0.125.\n Demo Code    EOQB + SS Approximation:\nAnother common approximation for r and Q is to convert the inventory-cost parameters into a service level and then to use the approach described for type-1 service level constraints. The safety stock is given by s = r − µ = zασ. The expected inventory process can be thought of as being decomposed into two parts, a “top” part that looks like an EOQ curve and a “bottom” part that is flat, with a height of s, the safety stock.\nWe therefore refer to this as the EOQ+SS approximation.\n Demo Code    Comparasion    Approximation Reorder Point Order Quantity Expected Cost     Expected-Inventory-Level 644.84 400.76 100.61   EOQB 609.02 391.33 90.93   EOQB + SS 652.96 390.28 101.12    ","permalink":"https://kimtyweter.github.io/blog/sc-stochastic-inventory-continuous-review/","tags":["Python","Dynamic programming","Optimization"],"title":"Solving Stochastic Inventory Problem: Continuous Review"},{"categories":["Supply chain"],"contents":"Language:  Python: Created full algorithm for solving periofic review\u0026rsquo;s stochastic inventory problem in real life  Situation Weekly demand for refrigerators at an appliance store has a Poisson distribution with 4. The holding and stockout cost for refrigerators at the store are $40 and $125 per week, respectively. Replenishment orders for refrigerators incur a fixed cost of $150.\nFind the optimal parameters (s, S), and the corresponding optimal cost.\nSolution Approach Additionalpropertiesthathelpdeviseanalgorithm:\n  Let y* minimize g(y); then s* ≤ y* ≤ S*\n We only need to look for s≤y* and S≥y*    Let s = max{y \u0026lt; y*|g(y, S) ≤ g(y)}; then s is the optimal reorder point for S\n Given S, the biggest s smaller than y* such that the cost per period of the corresponding (s, S) policy does not exceed the single period cost at that reorder point is optimal for S    If S\u0026rsquo; and S are two order-up-to levels, then g(s*(S),S) \u0026lt; g(s*(S\u0026rsquo;),S\u0026rsquo;) if and only if g(s*(S\u0026rsquo;),S) \u0026lt; g(s*(S\u0026rsquo;),S')\n Suppose we use the optimal reorder point for S\u0026rsquo; (s*(S\u0026rsquo;)) together with some other S; if this is better than using this reorder point with S\u0026rsquo; itself, then the best solution with S is better than the best solution with S'    If (s*, S*) are optimal with cost g* = g(s*, S*) then S* ≤ max{y ≥ y*|g(y) ≤ g*}\n Given a proposed (s, S), if there is a y\u0026rsquo; ≥ y* with single-period cost g(y\u0026rsquo;) less than or equal to g(s, S) and S \u0026gt; y\u0026rsquo;, then (s, S) cannot be optimal    We can now state an algorithm for finding (s*, S*)\n  Algorithm While g(S) ≤ g\u0026#39;: If g(s\u0026#39;, S) \u0026lt; g\u0026#39;, Set S\u0026#39;=S While g(s,S\u0026#39;)≤g(s+1): Sets=s+1 End while Set s\u0026#39;=s;g\u0026#39;=g(s\u0026#39;,S\u0026#39;) End if Set S = S + 1 End while Return (s\u0026#39;, S\u0026#39;) Result  Demo Code  ","permalink":"https://kimtyweter.github.io/blog/sc-stochastic-inventory-periodic-review/","tags":["Python","Dynamic programming","Optimization"],"title":"Solving Stochastic Inventory Problem: Periodic Review"},{"categories":["Software Engineer"],"contents":"Language:  Python: Created interface and animate in the game  Introduction At the beginning, the player controls a turtle, it will keep moving forward, the player can only control the head of the turtle to face (up, down, left and right), and the goal is to touch the blue dot, and avoid touching itself or other obstacles. Every time the turtle eats a blue dot, its body grows. There are walls on all four sides of the game interface (all of which cannot be crossed), and the highest score and the current score are recorded in words.\nResult  Demo Code  ","permalink":"https://kimtyweter.github.io/blog/turtle-game/","tags":["Python","Game Design"],"title":"Turtle Game"},{"categories":["Software Engineer"],"contents":"Language:  Python: Built full processes including analytics and API connections  Situation Instagram is one of the most popular social networking platforms in modern times. It can be used to record life, and at the same time, you can receive updates from friends through Instagram. But sometimes I often find that my number of followers are decreasing, or sometimes, one or two fans are inexplicably lost.\nTask I designed a tracker for unfollowers. I hope I can use programming language to find out who unfollowed my Instagram. Therefore, let\u0026rsquo;s review whether there are some changes in the relationship between yourself and Unfollowers or something to be vigilant about.\nAction The framework is listed below: Result  Demo Code  ","permalink":"https://kimtyweter.github.io/blog/instagram-unfollwers/","tags":["Python","System Design"],"title":"Who Unfollowed My Instagram? "},{"categories":["Data Visualization"],"contents":"Introduction This research investigates the relationship between PM2.5 emissions and economic groups in Harris county, Texas. The results of the study found that low-income groups are more likely to be exposed to PM2.5 harmful substances. Detailed research report can refer to the link. This article is dedicated to presenting the advanced drawing methods and drawing results used in the research.\nLanguage SQL: Querying data from the database Python: Data processing and Data visualization  Matplotlib Seaborn Geopandas  Data Visualization 1. Map and Scatter plot with density This graph presents a density map of PM2.5 emissions in Harris County, Texas. If the amount of discharge is larger, it is represented by a larger circle; if the amount of discharge is small, it is represented by a small blue circle. Both the shade of color and the size of the circle are related to emissions. Code\n2. Handmade grid map with density This picture uses the latitude and longitude cutting method to cut the longitude and latitude of Harris County. And calculate the household Income of the square for Segregation transformation, and visualize it as shown above. Code\n3. CBGs based map with density This graph uses CBGs (Census Block Group) as a unit to show the differences of Income in various regions. Code\n4. Professional expression of line-bar, scatterplot, and histogram The following four images show the line-bar, scatterplot, and histogram used in professional journals, respectively.\nLine bar This figure shows the income presentation of the four income groups, and adds the error bar to indicate the 95% confidence interval in the gap between groups. If the error bar overlaps between the two groups, it means that the difference between the two groups is not significant. Code\nScatterplot Scatter plots can be used to show the relationship between probability densities and variable series. At the same time, this figure also compares the probability density of two different variables. Code\nHistogram This figure demonstrates the flexibility to control the difference between bin and n. In addition, the visibility of the data can be better reflected through the transformation of color. Code\n5. Advanced Line bar chart This graph shows the relationship between different emitting industries and human activities. Through advanced drawing techniques, we distinguish the positive and negative values ​​of the data with different colors, and also classify the total emissions of various industries with colors. Code\n","permalink":"https://kimtyweter.github.io/blog/air-pollution/","tags":["Python","SQL","GEOPandas","Matplotlib"],"title":"Mobility Patterns of Low-Income People Lead to High Exposure to Respiratory Hazards"},{"categories":["Optimization"],"contents":"Language:  Python: Used in inbound call prediction and data processing C++: Used in Genertic Algorithm  Situation Due to the problem of uneven distribution of manpower in the company\u0026rsquo;s telephone customer service department for a long time, there is often a shortage of manpower or a surplus of manpower. Manpower shortage and manpower surplus are both key factors that affect the operation of the company, because the shortage of manpower will make the service level of the company decline, and affect the reputation of the company or the perception of the company. If there is excess manpower, it is a waste of the company\u0026rsquo;s labor costs.\nTask I try to combine the three methods of data science, programming, and optimization methods into one, and integrate these three methods into a system to help companies achieve the purpose of human resource optimization.\nAction First, I predict the incoming telephone line volume of the next month, and convert the predicted results into the required manpower through systematic simulation. Finally, we will apply the mathematical model of linear programming to convert the manpower constraints and company policies into several mathematically expressed sets of decision variables, an objective function, and a set of constraints. Lastly, I apply them to the genetic algorithm developed in C++ to allocate human resources. The end result is the shift schedule that each customer service employee receives.\nResult  Scheduling work efficiency: one day becomes half an hour Early warning effect: the rate of absenteeism can be calculated, so that the call center can be prepared Manpower utilization: 82% to 89%  ","permalink":"https://kimtyweter.github.io/blog/scheduling/","tags":["Python","C++","Scheduling"],"title":"Scheduling with Genertic Algorithm"},{"categories":["Supply Chain"],"contents":"Question1 The file 10node.xlsx contains data for a 10- node instance of the UFLP, with nodes located on the unit square and I = J, pictured in Figure 8.22. The file lists the x- and y-coordinates, demands hi, and fixed costs fj for each node, as well as the transportation cost cij between each pair of nodes i and j. Transportation costs equal 10 times the Euclidean distance between the nodes. All fixed costs equal 200. Solve this instance of the UFLP exactly by implementing the UFLP in the modeling language of your choice and solving it with a MIP solver. Report the optimal locations, optimal assignments, and optimal cost.\nLanguage/ Tool/ Package Python  gurobipy: The Gurobi Optimizer is a mathematical optimization software library for solving mixed-integer linear and quadratic optimization problems. pandas: open source data analysis and manipulation tool itertools: this module implements a number of iterator building blocks inspired by constructs from APL, Haskell, and SML.  Repo ","permalink":"https://kimtyweter.github.io/blog/sc-facility/","tags":["Python","Optimization","Dynamic Programming"],"title":"Solving UFLP Problem"},{"categories":["Data Science"],"contents":"Introduction Using linear regression by several curracny as factors to predict USD and EUD.\nLanguage/ Tool/ Package Python  twder: NTD exchange rate pandas: open source data analysis and manipulation tool statsmodels: supports specifying models using R-style formulas and pandas DataFrames  Repo ","permalink":"https://kimtyweter.github.io/blog/exchange/","tags":["Python","Machine Learning","Finance"],"title":"Exchange prediction"}]